{"version":3,"file":"modal.js","sourceRoot":"","sources":["../src/elements/modal.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,GAAG,EAAkB,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAGlC,IAAa,KAAK,GAAlB,MAAa,KAAM,SAAQ,UAAU;IAInC;QACE,KAAK,EAAE,CAAC;QACR,oEAAoE;QACpE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,kCAAkC;IAClC,kCAAkC;IAClC,0CAA0C;IAC1C,wDAAwD;IACxD,6BAA6B;IAC7B,oBAAoB;IACpB,SAAS;IACT,IAAI;IAEJ,iEAAiE;IACjE,iHAAiH;IACjH,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,mDAAmD;YACnD,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACrD;IACH,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,sDAAsD;QACtD,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC;IAED,0BAA0B;IAC1B,wBAAwB;IACxB,wBAAwB;IACxB,uCAAuC;IACvC,kBAAkB;IAClB,+BAA+B;IAC/B,WAAW;IACX,SAAS;IACT,OAAO;IACP,IAAI;IAEJ,6EAA6E;IAC7E,4IAA4I;IAC5I,0DAA0D;IAC1D,UAAU,CAAC,CAAa;QACtB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,YAAa,CAAC,CAAC,MAAsB,CAAC,SAAS,EAAE,CAAC,CAAA;QAC9D,IAAK,CAAC,CAAC,MAAsB,KAAK,IAAI,EAAE,EAAE,yFAAyF;YACjI,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,aAAa,EAAE;gBAC7B,OAAO,EAAE,IAAI;aACd,CAAC,CACH,CAAC;SACH;IACH,CAAC;IAED,kJAAkJ;IAClJ,WAAW,CAAC,CAAQ;QAClB,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;gDAEiC,IAAI,CAAC,WAAW;YACpD,QAAQ;iDAC6B,IAAI,CAAC,QAAQ;;;KAGzD,CAAC;IACJ,CAAC;CA8BF,CAAA;AA5BQ,YAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BlB,CAAC;AAzGF;IADC,QAAQ,EAAE;uCACO;AAFP,KAAK;IADjB,aAAa,CAAC,eAAe,CAAC;GAClB,KAAK,CA4GjB;SA5GY,KAAK","sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ErrorSvg } from \"./svgs\";\n\n@customElement(\"no-data-modal\")\nexport class Modal extends LitElement {\n  @property()\n  username!: string;\n\n  constructor() {\n    super();\n    // this.username is the username of the player who has no match data\n    this.username = \"\";\n    console.log(`username is: ${this.username}`);\n  }\n\n  // private closeModal2(e: Event) {\n  //   console.log('Close modal 2');\n  //   console.log(`Event is: ${e.target}`);\n  //   this.dispatchEvent(new CustomEvent(\"close-modal\", {\n  //     detail: 'Close modal',\n  //     bubbles: true\n  //   }));\n  // }\n\n  // callbacks add an event listener to the document for all clicks\n  // These are then directed to this.closeModal, which assessed whether clicks were inside or outside of the modal.\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.username) {\n      // this.addEventListener(\"click\", this.closeModal);\n      document.addEventListener(\"click\", this.closeModal);\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    // this.removeEventListener(\"click\", this.closeModal);\n    document.removeEventListener(\"click\", this.closeModal);\n  }\n\n  // handleClickOffModal() {\n  //   this.username = \"\";\n  //   this.dispatchEvent(\n  //     new CustomEvent(\"close-modal\", {\n  //       detail: {\n  //         clickOffModal: true,\n  //       },\n  //     })\n  //   );\n  // }\n\n  // If mouse click occurs outside modal, customEvent created which bubbles up.\n  // This seems to function correctly up to line 60, as I can't find the right thing to equate it to, to check the element that was clicked on\n  // It also seems to be called when the modal first appears\n  closeModal(e: MouseEvent) {\n    console.log('Close model called');\n    console.log(`Event is ${(e.target as HTMLElement).nodeValue}`)\n    if ((e.target as HTMLElement) === this) { //also tried if ((e.target as HTMLElement).innerText / .nodeValue === 'leader-dashboard')\n      console.log('Event dispatched');\n      this.dispatchEvent(\n        new CustomEvent(\"close-modal\", {\n          bubbles: true,\n        })\n      );\n    }\n  }\n\n  // Prevents event propagating if the click occurs inside the modal area. There seems to be an automatic event on every mouse click within the app.\n  clickInside(e: Event) {\n    e.stopPropagation();\n    console.log('Click inside');\n  }\n\n  render() {\n    return html`\n      <div class=\"modal-container\">\n        <div className=\"modal-content\" @click=${this.clickInside}>\n          ${ErrorSvg}\n          <p>Sorry, there is no data for user \"${this.username}\" available</p>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n    .model-container,\n    :host {\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      z-index: 9999;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: fixed;\n      top: 0;\n      left: 0;\n    }\n    .modal-content {\n      background-color: #fff;\n      padding: 1rem;\n      border-radius: 0.25rem;\n    }\n    svg {\n      height: 3rem;\n      width: auto;\n    }\n  `;\n}\n"]}